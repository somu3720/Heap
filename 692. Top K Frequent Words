class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        
        Map<String, Integer> map = new HashMap<>();
        for(String s : words)
        {
            map.put(s,map.getOrDefault(s, 0) + 1);
        }
        
        PriorityQueue<String> pq = new PriorityQueue<>((a,b) -> map.get(a).equals(map.get(b)) ?
                    b.compareTo(a) : map.get(a) - map.get(b));
        
        for(String word : map.keySet())
        {
            pq.add(word);
            if(pq.size() > k)
            {
                pq.poll();
            }
        }
        
        List<String> res = new ArrayList<>();
        while(!pq.isEmpty())
        {
            res.add(pq.poll());
        }
        
        Collections.reverse(res);
        
        return res;
        
    }
}

//https://leetcode.com/problems/top-k-frequent-words/discuss/1000542/Java-easy-Priority-Queue-approach
