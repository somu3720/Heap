class Solution {
    public int minSetSize(int[] arr) {
        
        int size = arr.length;
        int res = 0;
        
        int n = arr.length;
        
        Map<Integer,Integer> map = new HashMap<>(); // Element -- frequency 
        
        for(int i = 0; i < n; i++)
        {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);  //frequency of the element present in the Array 
        }
        
        PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<>((a,b) -> {
            return b.getValue() - a.getValue();
        }); 
        //Max heap, to  give give priority to the high frequency element 
        
        for(Map.Entry<Integer,Integer> entry : map.entrySet())
        {
            pq.offer(entry); //puting the element --frequency pair into the max Heap, to prioritising according to the frequency 
        }
        
        
        while(size > n/2)  // //half of the integers of the array are removed constraint 
        {
            size -= pq.poll().getValue();  //reducing the size 
            res++; //counting the set size 
            
        }
        
        return res;
        
        
        
    }
}

//https://leetcode.com/problems/reduce-array-size-to-the-half/discuss/1392905/Java-oror-Easy-Approach-with-Explanation-oror-Max-Heap-oror-Priority-Queue-oror-Hash-Map
