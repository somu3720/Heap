class Solution {
    public int[][] kClosest(int[][] points, int k) {
        
        PriorityQueue<int[]> pq = new PriorityQueue<>(
            (p1,p2) -> getDistance(p1).compareTo(getDistance(p2))
        );
        
        int n = points.length;
        for(int i = 0; i < n; i++)
        {
            pq.add(points[i]);
        }
        
        int res[][] = new int[k][2];
        
        
        for(int i = 0; i < k; i++)
        {
            res[i] = pq.poll();
        }
        
        return res;
    }
    
    private Double getDistance(int [] point)
    {
        return Math.sqrt(point[0]*point[0] + point[1]*point[1]);
    }
}

//https://leetcode.com/problems/k-closest-points-to-origin/discuss/1507637/Java-solution-using-PriorityQueue
